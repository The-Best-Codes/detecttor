import t from"fs";import{fileURLToPath as r}from"url";import e,{dirname as o}from"path";const n=o(r(import.meta.url)),i=e.join(n,"torlist.txt"),s=e.join(n,"torlist.txt.timestamp");export async function getIpAddress(t){const r=t?.overrideUrl||void 0;try{const t=r||"https://postman-echo.com/ip";try{new URL(t)}catch(r){throw new Error(`Invalid URL: ${t}`)}const e=await fetch(t);return(await e.json()).ip}catch(t){return console.error("Error fetching IP address:",t),"unknown"}}const a=async r=>{const e=r?.update??!1;try{const r="https://check.torproject.org/torbulkexitlist",o=await fetch(r),n=await o.text();try{if(e){const r=i;if(!n.split("\n").filter((t=>""!==t.trim())).every((t=>{const r=t.split(".");return 4===r.length&&r.every((t=>{const r=parseInt(t,10);return r>=0&&r<=255}))})))throw new Error("Invalid IP list");await t.promises.writeFile(r,n);const e=(new Date).getTime(),o=s;await t.promises.writeFile(o,e.toString())}}catch(t){console.error("Error updating IP list:",t)}return n.split("\n").map((t=>t.trim())).filter((t=>""!==t))}catch(t){return console.error("Error fetching IP list:",t),[]}},c=async()=>{try{const r=i;return(await t.promises.readFile(r,"utf8")).split("\n").map((t=>t.trim())).filter((t=>""!==t))}catch(t){return console.error("Error fetching IP list:",t),[]}},p=async()=>{try{const r=s,e=await t.promises.readFile(r,"utf8");return parseInt(e)}catch(t){return console.error("Error fetching timestamp:",t),0}};export async function getIpList(r){const e=r?.update??"auto";let o=!1;if("auto"===e){const t=await p();o=(new Date).getTime()-t>864e5}else!0===e&&(o=!0);try{return t.existsSync(i)?c():a({update:o||!1})}catch(t){return console.error("Error fetching IP list:",t),[]}}export default async function l(t){return(await getIpList()).includes(t)}export async function amIUsingTor(){const t=await getIpAddress();return await l(t)}