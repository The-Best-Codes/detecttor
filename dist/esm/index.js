import axios from"axios";import fs from"fs";import{fileURLToPath}from"url";import path,{dirname}from"path";const __filename=fileURLToPath(import.meta.url),__dirname=dirname(__filename),torIpFilePath=path.join(__dirname,"torlist.txt"),timestampFilePath=path.join(__dirname,"torlist.txt.timestamp");export async function getIpAddress(t){const r=t?.overrideUrl||void 0;try{const t=r||"https://postman-echo.com/ip";if(!/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(t))throw new Error("Invalid URL");const{data:e}=await axios.get(t);return e.ip}catch(t){return console.error("Error fetching IP address:",t),"unknown"}}const getIpListOnline=async t=>{const r=t?.update??!1;try{const t="https://check.torproject.org/torbulkexitlist",{data:e}=await axios.get(t);try{if(r){const t=torIpFilePath;await fs.promises.writeFile(t,e);const r=(new Date).getTime(),i=timestampFilePath;await fs.promises.writeFile(i,r.toString())}}catch(t){console.error("Error updating IP list:",t)}return e.split("\n").map((t=>t.trim())).filter((t=>""!==t))}catch(t){return console.error("Error fetching IP list:",t),[]}},getIpListOffline=async()=>{try{const t=torIpFilePath;return(await fs.promises.readFile(t,"utf8")).split("\n").map((t=>t.trim())).filter((t=>""!==t))}catch(t){return console.error("Error fetching IP list:",t),[]}},getTimestamp=async()=>{try{const t=timestampFilePath,r=await fs.promises.readFile(t,"utf8");return parseInt(r)}catch(t){return console.error("Error fetching timestamp:",t),0}};export async function getIpList(t){const r=t?.update??"auto";let e=!1;if("auto"===r){const t=await getTimestamp();e=(new Date).getTime()-t>864e5}else!0===r&&(e=!0);try{const t=torIpFilePath;return fs.existsSync(t)?getIpListOffline():getIpListOnline({update:e||!1})}catch(t){return console.error("Error fetching IP list:",t),[]}}export default async function isIpTor(t){return(await getIpList()).includes(t)}export async function amIUsingTor(){const t=await getIpAddress();return await isIpTor(t)}