import B from"fs";import K,{dirname as Y}from"path";import{fileURLToPath as Z}from"url";var $=Z(import.meta.url),M=Y($);async function b(j){let q=j?.overrideUrl||void 0;try{let x=q||"https://postman-echo.com/ip";try{let E=new URL(x)}catch(E){throw new Error(`Invalid URL: ${x}`)}return(await(await fetch(x)).json()).ip}catch(x){return console.error("Error fetching IP address:",x),"unknown"}}class N{torIpFilePath;timestampFilePath;constructor(j={}){this.torIpFilePath=j.torIpFilePath||K.join(M,"torlist.txt"),this.timestampFilePath=j.timestampFilePath||K.join(M,"torlist.txt.timestamp")}async getIpList(){try{return(await B.promises.readFile(this.torIpFilePath,"utf8")).split(`
`).map((q)=>q.trim()).filter((q)=>q!=="")}catch(j){return console.debug("Error fetching IP list from file:",j),[]}}async saveIpList(j){try{await B.promises.writeFile(this.torIpFilePath,j.join(`
`))}catch(q){throw console.error("Error saving IP list to file:",q),q}}async getTimestamp(){try{let j=await B.promises.readFile(this.timestampFilePath,"utf8");return parseInt(j,10)}catch(j){return console.debug("Error fetching timestamp from file:",j),0}}async saveTimestamp(j){try{await B.promises.writeFile(this.timestampFilePath,j.toString())}catch(q){throw console.error("Error saving timestamp to file:",q),q}}}class k{ipList=[];timestamp=0;async getIpList(){return[...this.ipList]}async saveIpList(j){this.ipList=[...j]}async getTimestamp(){return this.timestamp}async saveTimestamp(j){this.timestamp=j}}var v=async(j)=>{try{let w=(await(await fetch("https://check.torproject.org/torbulkexitlist")).text()).split(`
`).filter((G)=>G.trim()!=="");if(!w.every((G)=>{let H=G.split(".");return H.length===4&&H.every((X)=>{let J=parseInt(X,10);return J>=0&&J<=255})}))throw new Error("Invalid IP list from TorProject.");await j.saveIpList(w);let V=new Date().getTime();return await j.saveTimestamp(V),w}catch(q){return console.error("Error fetching IP list:",q),[]}};async function A(j){let q=j?.update??"auto",x=j?.persistence||new N,z=!1;if(q==="auto"){let w=await x.getTimestamp();z=new Date().getTime()-w>86400000}else if(q===!0)z=!0;try{let w=await x.getIpList();if(w.length===0||z)w=await v(x);return w}catch(w){return console.error("Error fetching IP list:",w),[]}}async function Q(j,q){return(await A({persistence:q})).includes(j)}async function R(j){let q=await b();return await Q(q,j)}var y=Q;export{Q as isIpTor,A as getIpList,b as getIpAddress,y as default,R as amIUsingTor,k as InMemoryPersistence,N as FileSystemPersistence};
