import t from"fs";import e,{dirname as r}from"path";import{fileURLToPath as i}from"url";const s=r(i(import.meta.url));export async function getIpAddress(t){const e=t?.overrideUrl||void 0;try{const t=e||"https://postman-echo.com/ip";try{new URL(t)}catch(e){throw new Error(`Invalid URL: ${t}`)}const r=await fetch(t);return(await r.json()).ip}catch(t){return console.error("Error fetching IP address:",t),"unknown"}}export class FileSystemPersistence{torIpFilePath;timestampFilePath;constructor(t={}){this.torIpFilePath=t.torIpFilePath||e.join(s,"torlist.txt"),this.timestampFilePath=t.timestampFilePath||e.join(s,"torlist.txt.timestamp")}async getIpList(){try{return(await t.promises.readFile(this.torIpFilePath,"utf8")).split("\n").map((t=>t.trim())).filter((t=>""!==t))}catch(t){return console.debug("Error fetching IP list from file:",t),[]}}async saveIpList(e){try{await t.promises.writeFile(this.torIpFilePath,e.join("\n"))}catch(t){throw console.error("Error saving IP list to file:",t),t}}async getTimestamp(){try{const e=await t.promises.readFile(this.timestampFilePath,"utf8");return parseInt(e,10)}catch(t){return console.debug("Error fetching timestamp from file:",t),0}}async saveTimestamp(e){try{await t.promises.writeFile(this.timestampFilePath,e.toString())}catch(t){throw console.error("Error saving timestamp to file:",t),t}}}export class InMemoryPersistence{ipList=[];timestamp=0;async getIpList(){return[...this.ipList]}async saveIpList(t){this.ipList=[...t]}async getTimestamp(){return this.timestamp}async saveTimestamp(t){this.timestamp=t}}export async function getIpList(t){const e=t?.update??"auto",r=t?.persistence||new FileSystemPersistence;let i=!1;if("auto"===e){const t=await r.getTimestamp();i=(new Date).getTime()-t>864e5}else!0===e&&(i=!0);try{let t=await r.getIpList();return(0===t.length||i)&&(t=await(async t=>{try{const e="https://check.torproject.org/torbulkexitlist",r=await fetch(e),i=(await r.text()).split("\n").filter((t=>""!==t.trim()));if(!i.every((t=>{const e=t.split(".");return 4===e.length&&e.every((t=>{const e=parseInt(t,10);return e>=0&&e<=255}))})))throw new Error("Invalid IP list from TorProject.");await t.saveIpList(i);const s=(new Date).getTime();return await t.saveTimestamp(s),i}catch(t){return console.error("Error fetching IP list:",t),[]}})(r)),t}catch(t){return console.error("Error fetching IP list:",t),[]}}export async function isIpTor(t,e){return(await getIpList({persistence:e})).includes(t)}export async function amIUsingTor(t){const e=await getIpAddress();return await isIpTor(e,t)}export default isIpTor;